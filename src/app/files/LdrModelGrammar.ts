/* eslint-disable */ import { Vector3, Matrix4 } from 'three';

// Generated by PEG.js v. 0.10.0 (ts-pegjs plugin v. 0.3.1 )
//
// https://pegjs.org/   https://github.com/metadevpro/ts-pegjs

"use strict";

export interface IFilePosition {
  offset: number;
  line: number;
  column: number;
}

export interface IFileRange {
  start: IFilePosition;
  end: IFilePosition;
}

export interface ILiteralExpectation {
  type: "literal";
  text: string;
  ignoreCase: boolean;
}

export interface IClassParts extends Array<string | IClassParts> {}

export interface IClassExpectation {
  type: "class";
  parts: IClassParts;
  inverted: boolean;
  ignoreCase: boolean;
}

export interface IAnyExpectation {
  type: "any";
}

export interface IEndExpectation {
  type: "end";
}

export interface IOtherExpectation {
  type: "other";
  description: string;
}

export type Expectation = ILiteralExpectation | IClassExpectation | IAnyExpectation | IEndExpectation | IOtherExpectation;

export class SyntaxError extends Error {
  public static buildMessage(expected: Expectation[], found: string | null) {
    function hex(ch: string): string {
      return ch.charCodeAt(0).toString(16).toUpperCase();
    }

    function literalEscape(s: string): string {
      return s
        .replace(/\\/g, "\\\\")
        .replace(/"/g,  "\\\"")
        .replace(/\0/g, "\\0")
        .replace(/\t/g, "\\t")
        .replace(/\n/g, "\\n")
        .replace(/\r/g, "\\r")
        .replace(/[\x00-\x0F]/g,            (ch) => "\\x0" + hex(ch) )
        .replace(/[\x10-\x1F\x7F-\x9F]/g, (ch) => "\\x"  + hex(ch) );
    }

    function classEscape(s: string): string {
      return s
        .replace(/\\/g, "\\\\")
        .replace(/\]/g, "\\]")
        .replace(/\^/g, "\\^")
        .replace(/-/g,  "\\-")
        .replace(/\0/g, "\\0")
        .replace(/\t/g, "\\t")
        .replace(/\n/g, "\\n")
        .replace(/\r/g, "\\r")
        .replace(/[\x00-\x0F]/g,            (ch) => "\\x0" + hex(ch) )
        .replace(/[\x10-\x1F\x7F-\x9F]/g, (ch) => "\\x"  + hex(ch) );
    }

    function describeExpectation(expectation: Expectation) {
      switch (expectation.type) {
        case "literal":
          return "\"" + literalEscape(expectation.text) + "\"";
        case "class":
          const escapedParts = expectation.parts.map((part) => {
            return Array.isArray(part)
              ? classEscape(part[0] as string) + "-" + classEscape(part[1] as string)
              : classEscape(part);
          });

          return "[" + (expectation.inverted ? "^" : "") + escapedParts + "]";
        case "any":
          return "any character";
        case "end":
          return "end of input";
        case "other":
          return expectation.description;
      }
    }

    function describeExpected(expected1: Expectation[]) {
      const descriptions = expected1.map(describeExpectation);
      let i: number;
      let j: number;

      descriptions.sort();

      if (descriptions.length > 0) {
        for (i = 1, j = 1; i < descriptions.length; i++) {
          if (descriptions[i - 1] !== descriptions[i]) {
            descriptions[j] = descriptions[i];
            j++;
          }
        }
        descriptions.length = j;
      }

      switch (descriptions.length) {
        case 1:
          return descriptions[0];

        case 2:
          return descriptions[0] + " or " + descriptions[1];

        default:
          return descriptions.slice(0, -1).join(", ")
            + ", or "
            + descriptions[descriptions.length - 1];
      }
    }

    function describeFound(found1: string | null) {
      return found1 ? "\"" + literalEscape(found1) + "\"" : "end of input";
    }

    return "Expected " + describeExpected(expected) + " but " + describeFound(found) + " found.";
  }

  public message: string;
  public expected: Expectation[];
  public found: string | null;
  public location: IFileRange;
  public name: string;

  constructor(message: string, expected: Expectation[], found: string | null, location: IFileRange) {
    super();
    this.message = message;
    this.expected = expected;
    this.found = found;
    this.location = location;
    this.name = "SyntaxError";

    if (typeof (Error as any).captureStackTrace === "function") {
      (Error as any).captureStackTrace(this, SyntaxError);
    }
  }
}

function peg$parse(input: string, options?: IParseOptions) {
  options = options !== undefined ? options : {};

  const peg$FAILED: Readonly<any> = {};

  const peg$startRuleFunctions: {[id: string]: any} = { MultiModels: peg$parseMultiModels };
  let peg$startRuleFunction: () => any = peg$parseMultiModels;

  const peg$c0 = function(models: any): any {
      	return models;
      };
  const peg$c1 = "0";
  const peg$c2 = peg$literalExpectation("0", false);
  const peg$c3 = "FILE";
  const peg$c4 = peg$literalExpectation("FILE", false);
  const peg$c5 = "NOFILE";
  const peg$c6 = peg$literalExpectation("NOFILE", false);
  const peg$c7 = function(f: any, m: any): any {
      	return { ...{ file: f}, ... m };
      };
  const peg$c8 = function(m: any): any {
    	return [ m ];
    };
  const peg$c9 = function(commands: any): any {
    	return { commands };
    };
  const peg$c10 = function(c: any): any {
    	return c
    };
  const peg$c11 = "\n";
  const peg$c12 = peg$literalExpectation("\n", false);
  const peg$c13 = "\r";
  const peg$c14 = peg$literalExpectation("\r", false);
  const peg$c15 = " ";
  const peg$c16 = peg$literalExpectation(" ", false);
  const peg$c17 = "\t";
  const peg$c18 = peg$literalExpectation("\t", false);
  const peg$c19 = /^[ \t]/;
  const peg$c20 = peg$classExpectation([" ", "\t"], false, false);
  const peg$c21 = function(c: any): any {
    	return c;
    };
  const peg$c22 = function(c: any): any {
      	return c;
      };
  const peg$c23 = function(): any {
  		return { ...{ lineType: 0} };
      };
  const peg$c24 = function(x: any): any {
  		return { ...{ lineType: 0}, ... x };
      };
  const peg$c25 = "1";
  const peg$c26 = peg$literalExpectation("1", false);
  const peg$c27 = function(x: any): any {
  	    return x;
     };
  const peg$c28 = "2";
  const peg$c29 = peg$literalExpectation("2", false);
  const peg$c30 = "3";
  const peg$c31 = peg$literalExpectation("3", false);
  const peg$c32 = "4";
  const peg$c33 = peg$literalExpectation("4", false);
  const peg$c34 = function(x: any): any {
      	return x;
      };
  const peg$c35 = "5";
  const peg$c36 = peg$literalExpectation("5", false);
  const peg$c37 = function(n: any): any {
    	return n;
    };
  const peg$c38 = "";
  const peg$c39 = function(): any {
      	return "";
      };
  const peg$c40 = "Name:";
  const peg$c41 = peg$literalExpectation("Name:", false);
  const peg$c42 = function(c: any): any {
    	return {
      	subType: "META",
      	metaName: "NAME",
          name: c
      };
    };
  const peg$c43 = "Author:";
  const peg$c44 = peg$literalExpectation("Author:", false);
  const peg$c45 = function(c: any): any {
    	return {
      	subType: "META",
      	metaName: "AUTHOR",
      	author: c
      };
    };
  const peg$c46 = "--";
  const peg$c47 = peg$literalExpectation("--", false);
  const peg$c48 = "//";
  const peg$c49 = peg$literalExpectation("//", false);
  const peg$c50 = function(c: any): any {
    	return {
  			subType: "COMMENT",
  				hasSlashes: true,
          comment: c
      };
    };
  const peg$c51 = function(c: any): any {
    	return {
      	subType: "COMMENT",
  				hasSlashes: false,
          comment: c
      };
    };
  const peg$c52 = /^[^\r]/;
  const peg$c53 = peg$classExpectation(["\r"], true, false);
  const peg$c54 = /^[^\n]/;
  const peg$c55 = peg$classExpectation(["\n"], true, false);
  const peg$c56 = function(): any {
  		return text();
    };
  const peg$c57 = "!";
  const peg$c58 = peg$literalExpectation("!", false);
  const peg$c59 = function(n: any, c: any): any {
    	return {
      	subType: "META",
          metaName: "!",
          value: n + c
      }
    };
  const peg$c60 = /^[A-Z_]/;
  const peg$c61 = peg$classExpectation([["A", "Z"], "_"], false, false);
  const peg$c62 = function(): any {
    	return text();
    };
  const peg$c63 = "BFC";
  const peg$c64 = peg$literalExpectation("BFC", false);
  const peg$c65 = function(cert: any): any {
    	return {
      	subType: "META",
      	metaName: "BFC",
      	bfc: cert
      }
    };
  const peg$c66 = "CW";
  const peg$c67 = peg$literalExpectation("CW", false);
  const peg$c68 = "CLIP";
  const peg$c69 = peg$literalExpectation("CLIP", false);
  const peg$c70 = function(): any {
      	return {
          	subType: "CLIP",
          	clip: true,
            implied: false,
            dir: "CW"
          };
      };
  const peg$c71 = "CCW";
  const peg$c72 = peg$literalExpectation("CCW", false);
  const peg$c73 = "INVERTNEXT";
  const peg$c74 = peg$literalExpectation("INVERTNEXT", false);
  const peg$c75 = function(): any {
      	return {
          	subType: "INVERTNEXT",
          	invertNext: true
          }
  	};
  const peg$c76 = "NOCLIP";
  const peg$c77 = peg$literalExpectation("NOCLIP", false);
  const peg$c78 = function(): any {
      	return {
          	subType: "CLIP",
              clip: false
          };
  	};
  const peg$c79 = function(dir: any): any {
     	return {
      		subType: "CLIP",
      		clip: true,
          implied: false,
          dir: dir
        };
     };
  const peg$c80 = function(): any {
      	return {
          	subType: "CLIP",
          	clip: true,
            implied: true,
            dir: "CCW"
        }
      };
  const peg$c81 = "CERTIFY";
  const peg$c82 = peg$literalExpectation("CERTIFY", false);
  const peg$c83 = function(c: any): any {
        return c;
     };
  const peg$c84 = function(): any {
      	return {
          	subType: "CERTIFY",
          	certfied: true,
            implied: true,
            dir: "CCW"
          };
      };
  const peg$c85 = function(dir: any): any {
     	return {
      		subType: "CERTIFY",
      		certified: true,
          implied: false,
          dir: dir
        };
     };
  const peg$c86 = "NOCERTIFY";
  const peg$c87 = peg$literalExpectation("NOCERTIFY", false);
  const peg$c88 = function(): any {
      	return {
          	subType: "CERTIFY",
      			certified: false
          };
      };
  const peg$c89 = "STEP";
  const peg$c90 = peg$literalExpectation("STEP", false);
  const peg$c91 = function(): any {
      	return {
          	subType: "META",
      			metaName: "STEP"
          };
      };
  const peg$c92 = "CLEAR";
  const peg$c93 = peg$literalExpectation("CLEAR", false);
  const peg$c94 = function(): any {
      	return {
          	subType: "META",
      			metaName: "CLEAR"
          };
      };
  const peg$c95 = "PAUSE";
  const peg$c96 = peg$literalExpectation("PAUSE", false);
  const peg$c97 = function(): any {
      	return {
          	subType: "META",
      			metaName: "PAUSE"
          };
      };
  const peg$c98 = "SAVE";
  const peg$c99 = peg$literalExpectation("SAVE", false);
  const peg$c100 = function(): any {
      	return {
          	subType: "META",
      			metaName: "SAVE"
          };
      };
  const peg$c101 = "PRINT";
  const peg$c102 = peg$literalExpectation("PRINT", false);
  const peg$c103 = function(c: any): any {
  		return {
  				subType: "META",
  				metaName: "PRINT",
  				print: c
  			};
  	};
  const peg$c104 = "WRITE";
  const peg$c105 = peg$literalExpectation("WRITE", false);
  const peg$c106 = function(c: any): any {
  		return {
  				subType: "META",
  				metaName: "WRITE",
  				write: c
  			};
  	};
  const peg$c107 = function(color: any, matrix: any, file: any): any {
      	return {
          	lineType: 1,
              color: color,
              matrix: matrix,
              file: file
          }
      };
  const peg$c108 = function(color: any, a: any, b: any): any {
      	return {
          	lineType: 2,
              color: color,
              firstPoint: a,
              secondPoint: b
          }
      };
  const peg$c109 = function(color: any, a: any, b: any, c: any): any {
      	return {
          	lineType: 3,
              color: color,
              firstPoint: a,
              secondPoint: b,
              thirdPoint: c
          }
      };
  const peg$c110 = function(color: any, a: any, b: any, c: any, d: any): any {
      	return {
          	lineType: 4,
              color: color,
              firstPoint: a,
              secondPoint: b,
              thirdPoint: c,
              forthPoint: d
          }
      };
  const peg$c111 = function(color: any, a: any, b: any, c: any, d: any): any {
      	return {
          	lineType: 5,
              color: color,
              firstPoint: a,
              secondPoint: b,
              firstControlPoint: c,
              secondControlPoint: d
          }
      };
  const peg$c112 = function(x: any, y: any, z: any, a: any, b: any, c: any, d: any, e: any, f: any, g: any, h: any, i: any): any {
      	return new Matrix4().set(a, b, c, x, d, e, f, y, g, h, i, z, 0, 0, 0, 1);
  //    	return [ a, b, c, x, d, e, f, y, g, h, i, z, 0, 0, 0, 1 ]
  	};
  const peg$c113 = function(a: any, b: any, c: any): any {
      	return new Vector3(a, b, c);
  //    	return [ a, b, c ]
      };
  const peg$c114 = function(x: any): any {
      	return x
      };
  const peg$c115 = /^[0-9]/;
  const peg$c116 = peg$classExpectation([["0", "9"]], false, false);
  const peg$c117 = function(): any {
  		return { num: parseInt(text(), 10) }
  	};
  const peg$c118 = "0x2";
  const peg$c119 = peg$literalExpectation("0x2", false);
  const peg$c120 = function(): any {
      	return { direct: parseInt(text(), 16) }
  };
  const peg$c121 = /^[0-9A-F]/;
  const peg$c122 = peg$classExpectation([["0", "9"], ["A", "F"]], false, false);
  const peg$c123 = function(): any { return parseFloat(text()); };
  const peg$c124 = ".";
  const peg$c125 = peg$literalExpectation(".", false);
  const peg$c126 = /^[1-9]/;
  const peg$c127 = peg$classExpectation([["1", "9"]], false, false);
  const peg$c128 = /^[eE]/;
  const peg$c129 = peg$classExpectation(["e", "E"], false, false);
  const peg$c130 = "-";
  const peg$c131 = peg$literalExpectation("-", false);
  const peg$c132 = "+";
  const peg$c133 = peg$literalExpectation("+", false);
  const peg$c134 = /^[ 0-9a-zA-Z_.\\\-]/;
  const peg$c135 = peg$classExpectation([" ", ["0", "9"], ["a", "z"], ["A", "Z"], "_", ".", "\\", "-"], false, false);
  const peg$c136 = function(): any {
      	return text().trim();
      };
  const peg$c137 = /^[\r\n]/;
  const peg$c138 = peg$classExpectation(["\r", "\n"], false, false);
  const peg$c139 = /^[\n]/;
  const peg$c140 = peg$classExpectation(["\n"], false, false);
  const peg$c141 = peg$otherExpectation("whitespace");

  let peg$currPos = 0;
  let peg$savedPos = 0;
  const peg$posDetailsCache = [{ line: 1, column: 1 }];
  let peg$maxFailPos = 0;
  let peg$maxFailExpected: Expectation[] = [];
  let peg$silentFails = 0;

  let peg$result;

  if (options.startRule !== undefined) {
    if (!(options.startRule in peg$startRuleFunctions)) {
      throw new Error("Can't start parsing from rule \"" + options.startRule + "\".");
    }

    peg$startRuleFunction = peg$startRuleFunctions[options.startRule];
  }

  function text(): string {
    return input.substring(peg$savedPos, peg$currPos);
  }

  function location(): IFileRange {
    return peg$computeLocation(peg$savedPos, peg$currPos);
  }

  function expected(description: string, location1?: IFileRange) {
    location1 = location1 !== undefined
      ? location1
      : peg$computeLocation(peg$savedPos, peg$currPos);

    throw peg$buildStructuredError(
      [peg$otherExpectation(description)],
      input.substring(peg$savedPos, peg$currPos),
      location1
    );
  }

  function error(message: string, location1?: IFileRange) {
    location1 = location1 !== undefined
      ? location1
      : peg$computeLocation(peg$savedPos, peg$currPos);

    throw peg$buildSimpleError(message, location1);
  }

  function peg$literalExpectation(text1: string, ignoreCase: boolean): ILiteralExpectation {
    return { type: "literal", text: text1, ignoreCase: ignoreCase };
  }

  function peg$classExpectation(parts: IClassParts, inverted: boolean, ignoreCase: boolean): IClassExpectation {
    return { type: "class", parts: parts, inverted: inverted, ignoreCase: ignoreCase };
  }

  function peg$anyExpectation(): IAnyExpectation {
    return { type: "any" };
  }

  function peg$endExpectation(): IEndExpectation {
    return { type: "end" };
  }

  function peg$otherExpectation(description: string): IOtherExpectation {
    return { type: "other", description: description };
  }

  function peg$computePosDetails(pos: number) {
    let details = peg$posDetailsCache[pos];
    let p;

    if (details) {
      return details;
    } else {
      p = pos - 1;
      while (!peg$posDetailsCache[p]) {
        p--;
      }

      details = peg$posDetailsCache[p];
      details = {
        line: details.line,
        column: details.column
      };

      while (p < pos) {
        if (input.charCodeAt(p) === 10) {
          details.line++;
          details.column = 1;
        } else {
          details.column++;
        }

        p++;
      }

      peg$posDetailsCache[pos] = details;

      return details;
    }
  }

  function peg$computeLocation(startPos: number, endPos: number): IFileRange {
    const startPosDetails = peg$computePosDetails(startPos);
    const endPosDetails = peg$computePosDetails(endPos);

    return {
      start: {
        offset: startPos,
        line: startPosDetails.line,
        column: startPosDetails.column
      },
      end: {
        offset: endPos,
        line: endPosDetails.line,
        column: endPosDetails.column
      }
    };
  }

  function peg$fail(expected1: Expectation) {
    if (peg$currPos < peg$maxFailPos) { return; }

    if (peg$currPos > peg$maxFailPos) {
      peg$maxFailPos = peg$currPos;
      peg$maxFailExpected = [];
    }

    peg$maxFailExpected.push(expected1);
  }

  function peg$buildSimpleError(message: string, location1: IFileRange) {
    return new SyntaxError(message, [], "", location1);
  }

  function peg$buildStructuredError(expected1: Expectation[], found: string | null, location1: IFileRange) {
    return new SyntaxError(
      SyntaxError.buildMessage(expected1, found),
      expected1,
      found,
      location1
    );
  }

  function peg$parseMultiModels(): any {
    let s0, s1, s2;

    s0 = peg$parseSingleModel();
    if (s0 as any === peg$FAILED) {
      s0 = peg$currPos;
      s1 = [];
      s2 = peg$parseMultiModel();
      while (s2 as any !== peg$FAILED) {
        s1.push(s2);
        s2 = peg$parseMultiModel();
      }
      if (s1 as any !== peg$FAILED) {
        peg$savedPos = s0;
        s1 = peg$c0(s1);
      }
      s0 = s1;
    }

    return s0;
  }

  function peg$parseMultiModel(): any {
    let s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10, s11;

    s0 = peg$currPos;
    if (input.charCodeAt(peg$currPos) === 48) {
      s1 = peg$c1;
      peg$currPos++;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c2); }
    }
    if (s1 as any !== peg$FAILED) {
      s2 = peg$parse_();
      if (s2 as any !== peg$FAILED) {
        if (input.substr(peg$currPos, 4) === peg$c3) {
          s3 = peg$c3;
          peg$currPos += 4;
        } else {
          s3 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c4); }
        }
        if (s3 as any !== peg$FAILED) {
          s4 = peg$parse_();
          if (s4 as any !== peg$FAILED) {
            s5 = peg$parseFile();
            if (s5 as any !== peg$FAILED) {
              s6 = peg$parseEOL();
              if (s6 as any !== peg$FAILED) {
                s7 = peg$parseModel();
                if (s7 as any !== peg$FAILED) {
                  if (input.charCodeAt(peg$currPos) === 48) {
                    s8 = peg$c1;
                    peg$currPos++;
                  } else {
                    s8 = peg$FAILED;
                    if (peg$silentFails === 0) { peg$fail(peg$c2); }
                  }
                  if (s8 as any !== peg$FAILED) {
                    s9 = peg$parse_();
                    if (s9 as any !== peg$FAILED) {
                      if (input.substr(peg$currPos, 6) === peg$c5) {
                        s10 = peg$c5;
                        peg$currPos += 6;
                      } else {
                        s10 = peg$FAILED;
                        if (peg$silentFails === 0) { peg$fail(peg$c6); }
                      }
                      if (s10 as any !== peg$FAILED) {
                        s11 = peg$parseEOL();
                        if (s11 as any !== peg$FAILED) {
                          peg$savedPos = s0;
                          s1 = peg$c7(s5, s7);
                          s0 = s1;
                        } else {
                          peg$currPos = s0;
                          s0 = peg$FAILED;
                        }
                      } else {
                        peg$currPos = s0;
                        s0 = peg$FAILED;
                      }
                    } else {
                      peg$currPos = s0;
                      s0 = peg$FAILED;
                    }
                  } else {
                    peg$currPos = s0;
                    s0 = peg$FAILED;
                  }
                } else {
                  peg$currPos = s0;
                  s0 = peg$FAILED;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseSingleModel(): any {
    let s0, s1, s2, s3, s4, s5;

    s0 = peg$currPos;
    s1 = peg$currPos;
    peg$silentFails++;
    s2 = peg$currPos;
    if (input.charCodeAt(peg$currPos) === 48) {
      s3 = peg$c1;
      peg$currPos++;
    } else {
      s3 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c2); }
    }
    if (s3 as any !== peg$FAILED) {
      s4 = peg$parse_();
      if (s4 as any !== peg$FAILED) {
        if (input.substr(peg$currPos, 4) === peg$c3) {
          s5 = peg$c3;
          peg$currPos += 4;
        } else {
          s5 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c4); }
        }
        if (s5 as any !== peg$FAILED) {
          s3 = [s3, s4, s5];
          s2 = s3;
        } else {
          peg$currPos = s2;
          s2 = peg$FAILED;
        }
      } else {
        peg$currPos = s2;
        s2 = peg$FAILED;
      }
    } else {
      peg$currPos = s2;
      s2 = peg$FAILED;
    }
    peg$silentFails--;
    if (s2 as any === peg$FAILED) {
      s1 = undefined;
    } else {
      peg$currPos = s1;
      s1 = peg$FAILED;
    }
    if (s1 as any !== peg$FAILED) {
      s2 = peg$parseModel();
      if (s2 as any !== peg$FAILED) {
        peg$savedPos = s0;
        s1 = peg$c8(s2);
        s0 = s1;
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseModel(): any {
    let s0, s1, s2;

    s0 = peg$currPos;
    s1 = [];
    s2 = peg$parseCommand();
    while (s2 as any !== peg$FAILED) {
      s1.push(s2);
      s2 = peg$parseCommand();
    }
    if (s1 as any !== peg$FAILED) {
      peg$savedPos = s0;
      s1 = peg$c9(s1);
    }
    s0 = s1;

    return s0;
  }

  function peg$parseTitle(): any {
    let s0, s1;

    s0 = peg$currPos;
    s1 = peg$parseCommentText();
    if (s1 as any !== peg$FAILED) {
      peg$savedPos = s0;
      s1 = peg$c10(s1);
    }
    s0 = s1;

    return s0;
  }

  function peg$parseNewLine(): any {
    let s0;

    if (input.charCodeAt(peg$currPos) === 10) {
      s0 = peg$c11;
      peg$currPos++;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c12); }
    }

    return s0;
  }

  function peg$parseCarrageReturn(): any {
    let s0;

    if (input.charCodeAt(peg$currPos) === 13) {
      s0 = peg$c13;
      peg$currPos++;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c14); }
    }

    return s0;
  }

  function peg$parseWhitespace(): any {
    let s0;

    s0 = peg$parseSpace();
    if (s0 as any === peg$FAILED) {
      s0 = peg$parseTab();
    }

    return s0;
  }

  function peg$parseSpace(): any {
    let s0;

    if (input.charCodeAt(peg$currPos) === 32) {
      s0 = peg$c15;
      peg$currPos++;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c16); }
    }

    return s0;
  }

  function peg$parseTab(): any {
    let s0;

    if (input.charCodeAt(peg$currPos) === 9) {
      s0 = peg$c17;
      peg$currPos++;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c18); }
    }

    return s0;
  }

  function peg$parseCommand(): any {
    let s0, s1, s2, s3, s4, s5;

    s0 = peg$currPos;
    s1 = peg$currPos;
    peg$silentFails++;
    s2 = peg$currPos;
    if (input.charCodeAt(peg$currPos) === 48) {
      s3 = peg$c1;
      peg$currPos++;
    } else {
      s3 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c2); }
    }
    if (s3 as any !== peg$FAILED) {
      s4 = peg$parse_();
      if (s4 as any !== peg$FAILED) {
        if (input.substr(peg$currPos, 6) === peg$c5) {
          s5 = peg$c5;
          peg$currPos += 6;
        } else {
          s5 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c6); }
        }
        if (s5 as any !== peg$FAILED) {
          s3 = [s3, s4, s5];
          s2 = s3;
        } else {
          peg$currPos = s2;
          s2 = peg$FAILED;
        }
      } else {
        peg$currPos = s2;
        s2 = peg$FAILED;
      }
    } else {
      peg$currPos = s2;
      s2 = peg$FAILED;
    }
    peg$silentFails--;
    if (s2 as any === peg$FAILED) {
      s1 = undefined;
    } else {
      peg$currPos = s1;
      s1 = peg$FAILED;
    }
    if (s1 as any !== peg$FAILED) {
      s2 = [];
      if (peg$c19.test(input.charAt(peg$currPos))) {
        s3 = input.charAt(peg$currPos);
        peg$currPos++;
      } else {
        s3 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c20); }
      }
      while (s3 as any !== peg$FAILED) {
        s2.push(s3);
        if (peg$c19.test(input.charAt(peg$currPos))) {
          s3 = input.charAt(peg$currPos);
          peg$currPos++;
        } else {
          s3 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c20); }
        }
      }
      if (s2 as any !== peg$FAILED) {
        s3 = peg$parseCommentCommand();
        if (s3 as any === peg$FAILED) {
          s3 = peg$parsePartLine();
          if (s3 as any === peg$FAILED) {
            s3 = peg$parseLineCommand();
            if (s3 as any === peg$FAILED) {
              s3 = peg$parseTriangleCommand();
              if (s3 as any === peg$FAILED) {
                s3 = peg$parseQuadCommand();
                if (s3 as any === peg$FAILED) {
                  s3 = peg$parseOptionalLineCommand();
                }
              }
            }
          }
        }
        if (s3 as any !== peg$FAILED) {
          s4 = [];
          s5 = peg$parseWhitespace();
          if (s5 as any === peg$FAILED) {
            s5 = peg$parseCarrageReturn();
            if (s5 as any === peg$FAILED) {
              s5 = peg$parseNewLine();
            }
          }
          while (s5 as any !== peg$FAILED) {
            s4.push(s5);
            s5 = peg$parseWhitespace();
            if (s5 as any === peg$FAILED) {
              s5 = peg$parseCarrageReturn();
              if (s5 as any === peg$FAILED) {
                s5 = peg$parseNewLine();
              }
            }
          }
          if (s4 as any !== peg$FAILED) {
            peg$savedPos = s0;
            s1 = peg$c21(s3);
            s0 = s1;
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseCommentCommand(): any {
    let s0, s1, s2;

    s0 = peg$currPos;
    if (input.charCodeAt(peg$currPos) === 48) {
      s1 = peg$c1;
      peg$currPos++;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c2); }
    }
    if (s1 as any !== peg$FAILED) {
      s2 = peg$parseNormalComment();
      if (s2 as any === peg$FAILED) {
        s2 = peg$parseEmptyComment();
      }
      if (s2 as any !== peg$FAILED) {
        peg$savedPos = s0;
        s1 = peg$c22(s2);
        s0 = s1;
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseEmptyComment(): any {
    let s0, s1;

    s0 = peg$currPos;
    s1 = peg$parseEOL();
    if (s1 as any !== peg$FAILED) {
      peg$savedPos = s0;
      s1 = peg$c23();
    }
    s0 = s1;

    return s0;
  }

  function peg$parseNormalComment(): any {
    let s0, s1, s2, s3;

    s0 = peg$currPos;
    s1 = peg$parse_();
    if (s1 as any !== peg$FAILED) {
      s2 = peg$parseCommentMeta();
      if (s2 as any !== peg$FAILED) {
        s3 = peg$parseEOL();
        if (s3 as any !== peg$FAILED) {
          peg$savedPos = s0;
          s1 = peg$c24(s2);
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parsePartLine(): any {
    let s0, s1, s2, s3, s4;

    s0 = peg$currPos;
    if (input.charCodeAt(peg$currPos) === 49) {
      s1 = peg$c25;
      peg$currPos++;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c26); }
    }
    if (s1 as any !== peg$FAILED) {
      s2 = peg$parse_();
      if (s2 as any !== peg$FAILED) {
        s3 = peg$parsePart();
        if (s3 as any !== peg$FAILED) {
          s4 = peg$parseEOL();
          if (s4 as any !== peg$FAILED) {
            peg$savedPos = s0;
            s1 = peg$c27(s3);
            s0 = s1;
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseLineCommand(): any {
    let s0, s1, s2, s3, s4;

    s0 = peg$currPos;
    if (input.charCodeAt(peg$currPos) === 50) {
      s1 = peg$c28;
      peg$currPos++;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c29); }
    }
    if (s1 as any !== peg$FAILED) {
      s2 = peg$parse_();
      if (s2 as any !== peg$FAILED) {
        s3 = peg$parseLine();
        if (s3 as any !== peg$FAILED) {
          s4 = peg$parseEOL();
          if (s4 as any !== peg$FAILED) {
            peg$savedPos = s0;
            s1 = peg$c27(s3);
            s0 = s1;
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseTriangleCommand(): any {
    let s0, s1, s2, s3, s4;

    s0 = peg$currPos;
    if (input.charCodeAt(peg$currPos) === 51) {
      s1 = peg$c30;
      peg$currPos++;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c31); }
    }
    if (s1 as any !== peg$FAILED) {
      s2 = peg$parse_();
      if (s2 as any !== peg$FAILED) {
        s3 = peg$parseTriangle();
        if (s3 as any !== peg$FAILED) {
          s4 = peg$parseEOL();
          if (s4 as any !== peg$FAILED) {
            peg$savedPos = s0;
            s1 = peg$c27(s3);
            s0 = s1;
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseQuadCommand(): any {
    let s0, s1, s2, s3, s4;

    s0 = peg$currPos;
    if (input.charCodeAt(peg$currPos) === 52) {
      s1 = peg$c32;
      peg$currPos++;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c33); }
    }
    if (s1 as any !== peg$FAILED) {
      s2 = peg$parse_();
      if (s2 as any !== peg$FAILED) {
        s3 = peg$parseQuad();
        if (s3 as any !== peg$FAILED) {
          s4 = peg$parseEOL();
          if (s4 as any !== peg$FAILED) {
            peg$savedPos = s0;
            s1 = peg$c34(s3);
            s0 = s1;
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseOptionalLineCommand(): any {
    let s0, s1, s2, s3, s4;

    s0 = peg$currPos;
    if (input.charCodeAt(peg$currPos) === 53) {
      s1 = peg$c35;
      peg$currPos++;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c36); }
    }
    if (s1 as any !== peg$FAILED) {
      s2 = peg$parse_();
      if (s2 as any !== peg$FAILED) {
        s3 = peg$parseOptionalLine();
        if (s3 as any !== peg$FAILED) {
          s4 = peg$parseEOL();
          if (s4 as any !== peg$FAILED) {
            peg$savedPos = s0;
            s1 = peg$c34(s3);
            s0 = s1;
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseCommentMeta(): any {
    let s0, s1;

    s0 = peg$parseSlashComment();
    if (s0 as any === peg$FAILED) {
      s0 = peg$parseName();
      if (s0 as any === peg$FAILED) {
        s0 = peg$parseAuthor();
        if (s0 as any === peg$FAILED) {
          s0 = peg$parseMeta();
          if (s0 as any === peg$FAILED) {
            s0 = peg$parseBfc();
            if (s0 as any === peg$FAILED) {
              s0 = peg$parseStep();
              if (s0 as any === peg$FAILED) {
                s0 = peg$parsePrint();
                if (s0 as any === peg$FAILED) {
                  s0 = peg$parseWrite();
                  if (s0 as any === peg$FAILED) {
                    s0 = peg$parseClear();
                    if (s0 as any === peg$FAILED) {
                      s0 = peg$parsePause();
                      if (s0 as any === peg$FAILED) {
                        s0 = peg$parseSave();
                        if (s0 as any === peg$FAILED) {
                          s0 = peg$currPos;
                          s1 = peg$parseComment();
                          if (s1 as any !== peg$FAILED) {
                            peg$savedPos = s0;
                            s1 = peg$c37(s1);
                          }
                          s0 = s1;
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }

    return s0;
  }

  function peg$parseNoComment(): any {
    let s0, s1;

    s0 = peg$currPos;
    s1 = peg$c38;
    if (s1 as any !== peg$FAILED) {
      peg$savedPos = s0;
      s1 = peg$c39();
    }
    s0 = s1;

    return s0;
  }

  function peg$parseName(): any {
    let s0, s1, s2, s3;

    s0 = peg$currPos;
    if (input.substr(peg$currPos, 5) === peg$c40) {
      s1 = peg$c40;
      peg$currPos += 5;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c41); }
    }
    if (s1 as any !== peg$FAILED) {
      s2 = peg$parse_();
      if (s2 as any !== peg$FAILED) {
        s3 = peg$parseCommentText();
        if (s3 as any !== peg$FAILED) {
          peg$savedPos = s0;
          s1 = peg$c42(s3);
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseAuthor(): any {
    let s0, s1, s2, s3;

    s0 = peg$currPos;
    if (input.substr(peg$currPos, 7) === peg$c43) {
      s1 = peg$c43;
      peg$currPos += 7;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c44); }
    }
    if (s1 as any !== peg$FAILED) {
      s2 = peg$parse_();
      if (s2 as any !== peg$FAILED) {
        s3 = peg$parseCommentText();
        if (s3 as any !== peg$FAILED) {
          peg$savedPos = s0;
          s1 = peg$c45(s3);
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseSlashComment(): any {
    let s0, s1, s2, s3;

    s0 = peg$currPos;
    if (input.substr(peg$currPos, 2) === peg$c46) {
      s1 = peg$c46;
      peg$currPos += 2;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c47); }
    }
    if (s1 as any === peg$FAILED) {
      if (input.substr(peg$currPos, 2) === peg$c48) {
        s1 = peg$c48;
        peg$currPos += 2;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c49); }
      }
    }
    if (s1 as any !== peg$FAILED) {
      s2 = [];
      s3 = peg$parse_();
      while (s3 as any !== peg$FAILED) {
        s2.push(s3);
        s3 = peg$parse_();
      }
      if (s2 as any !== peg$FAILED) {
        s3 = peg$parseCommentText();
        if (s3 as any !== peg$FAILED) {
          peg$savedPos = s0;
          s1 = peg$c50(s3);
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseComment(): any {
    let s0, s1;

    s0 = peg$currPos;
    s1 = peg$parseCommentText();
    if (s1 as any !== peg$FAILED) {
      peg$savedPos = s0;
      s1 = peg$c51(s1);
    }
    s0 = s1;

    return s0;
  }

  function peg$parseCommentText(): any {
    let s0, s1, s2, s3;

    s0 = peg$currPos;
    if (peg$c52.test(input.charAt(peg$currPos))) {
      s1 = input.charAt(peg$currPos);
      peg$currPos++;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c53); }
    }
    if (s1 as any !== peg$FAILED) {
      s2 = [];
      if (peg$c54.test(input.charAt(peg$currPos))) {
        s3 = input.charAt(peg$currPos);
        peg$currPos++;
      } else {
        s3 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c55); }
      }
      while (s3 as any !== peg$FAILED) {
        s2.push(s3);
        if (peg$c54.test(input.charAt(peg$currPos))) {
          s3 = input.charAt(peg$currPos);
          peg$currPos++;
        } else {
          s3 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c55); }
        }
      }
      if (s2 as any !== peg$FAILED) {
        peg$savedPos = s0;
        s1 = peg$c56();
        s0 = s1;
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseMeta(): any {
    let s0, s1, s2, s3;

    s0 = peg$currPos;
    if (input.charCodeAt(peg$currPos) === 33) {
      s1 = peg$c57;
      peg$currPos++;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c58); }
    }
    if (s1 as any !== peg$FAILED) {
      s2 = peg$parseMetaName();
      if (s2 as any !== peg$FAILED) {
        s3 = peg$parseCommentText();
        if (s3 as any !== peg$FAILED) {
          peg$savedPos = s0;
          s1 = peg$c59(s2, s3);
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseMetaName(): any {
    let s0, s1, s2;

    s0 = peg$currPos;
    s1 = [];
    if (peg$c60.test(input.charAt(peg$currPos))) {
      s2 = input.charAt(peg$currPos);
      peg$currPos++;
    } else {
      s2 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c61); }
    }
    if (s2 as any !== peg$FAILED) {
      while (s2 as any !== peg$FAILED) {
        s1.push(s2);
        if (peg$c60.test(input.charAt(peg$currPos))) {
          s2 = input.charAt(peg$currPos);
          peg$currPos++;
        } else {
          s2 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c61); }
        }
      }
    } else {
      s1 = peg$FAILED;
    }
    if (s1 as any !== peg$FAILED) {
      peg$savedPos = s0;
      s1 = peg$c62();
    }
    s0 = s1;

    return s0;
  }

  function peg$parseBfc(): any {
    let s0, s1, s2, s3;

    s0 = peg$currPos;
    if (input.substr(peg$currPos, 3) === peg$c63) {
      s1 = peg$c63;
      peg$currPos += 3;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c64); }
    }
    if (s1 as any !== peg$FAILED) {
      s2 = peg$parse_();
      if (s2 as any !== peg$FAILED) {
        s3 = peg$parseNoCertify();
        if (s3 as any === peg$FAILED) {
          s3 = peg$parseCertify();
          if (s3 as any === peg$FAILED) {
            s3 = peg$parseClip();
            if (s3 as any === peg$FAILED) {
              s3 = peg$parseNoClip();
              if (s3 as any === peg$FAILED) {
                s3 = peg$parseCwClip();
                if (s3 as any === peg$FAILED) {
                  s3 = peg$parseCcwClip();
                  if (s3 as any === peg$FAILED) {
                    s3 = peg$parseWindingDir();
                    if (s3 as any === peg$FAILED) {
                      s3 = peg$parseInvertNext();
                    }
                  }
                }
              }
            }
          }
        }
        if (s3 as any !== peg$FAILED) {
          peg$savedPos = s0;
          s1 = peg$c65(s3);
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseCwClip(): any {
    let s0, s1, s2, s3;

    s0 = peg$currPos;
    if (input.substr(peg$currPos, 2) === peg$c66) {
      s1 = peg$c66;
      peg$currPos += 2;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c67); }
    }
    if (s1 as any !== peg$FAILED) {
      s2 = peg$parse_();
      if (s2 as any !== peg$FAILED) {
        if (input.substr(peg$currPos, 4) === peg$c68) {
          s3 = peg$c68;
          peg$currPos += 4;
        } else {
          s3 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c69); }
        }
        if (s3 as any !== peg$FAILED) {
          peg$savedPos = s0;
          s1 = peg$c70();
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseCcwClip(): any {
    let s0, s1, s2, s3;

    s0 = peg$currPos;
    if (input.substr(peg$currPos, 3) === peg$c71) {
      s1 = peg$c71;
      peg$currPos += 3;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c72); }
    }
    if (s1 as any !== peg$FAILED) {
      s2 = peg$parse_();
      if (s2 as any !== peg$FAILED) {
        if (input.substr(peg$currPos, 4) === peg$c68) {
          s3 = peg$c68;
          peg$currPos += 4;
        } else {
          s3 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c69); }
        }
        if (s3 as any !== peg$FAILED) {
          peg$savedPos = s0;
          s1 = peg$c70();
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseInvertNext(): any {
    let s0, s1;

    s0 = peg$currPos;
    if (input.substr(peg$currPos, 10) === peg$c73) {
      s1 = peg$c73;
      peg$currPos += 10;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c74); }
    }
    if (s1 as any !== peg$FAILED) {
      peg$savedPos = s0;
      s1 = peg$c75();
    }
    s0 = s1;

    return s0;
  }

  function peg$parseNoClip(): any {
    let s0, s1;

    s0 = peg$currPos;
    if (input.substr(peg$currPos, 6) === peg$c76) {
      s1 = peg$c76;
      peg$currPos += 6;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c77); }
    }
    if (s1 as any !== peg$FAILED) {
      peg$savedPos = s0;
      s1 = peg$c78();
    }
    s0 = s1;

    return s0;
  }

  function peg$parseClip(): any {
    let s0, s1, s2;

    s0 = peg$currPos;
    if (input.substr(peg$currPos, 4) === peg$c68) {
      s1 = peg$c68;
      peg$currPos += 4;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c69); }
    }
    if (s1 as any !== peg$FAILED) {
      s2 = peg$parseClipDir();
      if (s2 as any === peg$FAILED) {
        s2 = peg$parseClipNoDir();
      }
      if (s2 as any !== peg$FAILED) {
        peg$savedPos = s0;
        s1 = peg$c22(s2);
        s0 = s1;
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseClipDir(): any {
    let s0, s1, s2;

    s0 = peg$currPos;
    s1 = peg$parse_();
    if (s1 as any !== peg$FAILED) {
      if (input.substr(peg$currPos, 3) === peg$c71) {
        s2 = peg$c71;
        peg$currPos += 3;
      } else {
        s2 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c72); }
      }
      if (s2 as any === peg$FAILED) {
        if (input.substr(peg$currPos, 2) === peg$c66) {
          s2 = peg$c66;
          peg$currPos += 2;
        } else {
          s2 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c67); }
        }
      }
      if (s2 as any !== peg$FAILED) {
        peg$savedPos = s0;
        s1 = peg$c79(s2);
        s0 = s1;
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseClipNoDir(): any {
    let s0, s1;

    s0 = peg$currPos;
    s1 = peg$c38;
    if (s1 as any !== peg$FAILED) {
      peg$savedPos = s0;
      s1 = peg$c80();
    }
    s0 = s1;

    return s0;
  }

  function peg$parseWindingDir(): any {
    let s0, s1;

    s0 = peg$currPos;
    if (input.substr(peg$currPos, 3) === peg$c71) {
      s1 = peg$c71;
      peg$currPos += 3;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c72); }
    }
    if (s1 as any === peg$FAILED) {
      if (input.substr(peg$currPos, 2) === peg$c66) {
        s1 = peg$c66;
        peg$currPos += 2;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c67); }
      }
    }
    if (s1 as any !== peg$FAILED) {
      peg$savedPos = s0;
      s1 = peg$c79(s1);
    }
    s0 = s1;

    return s0;
  }

  function peg$parseCertify(): any {
    let s0, s1, s2;

    s0 = peg$currPos;
    if (input.substr(peg$currPos, 7) === peg$c81) {
      s1 = peg$c81;
      peg$currPos += 7;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c82); }
    }
    if (s1 as any !== peg$FAILED) {
      s2 = peg$parseCertifyDir();
      if (s2 as any === peg$FAILED) {
        s2 = peg$parseCertifyNoDir();
      }
      if (s2 as any !== peg$FAILED) {
        peg$savedPos = s0;
        s1 = peg$c83(s2);
        s0 = s1;
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseCertifyNoDir(): any {
    let s0, s1;

    s0 = peg$currPos;
    s1 = peg$c38;
    if (s1 as any !== peg$FAILED) {
      peg$savedPos = s0;
      s1 = peg$c84();
    }
    s0 = s1;

    return s0;
  }

  function peg$parseCertifyDir(): any {
    let s0, s1, s2;

    s0 = peg$currPos;
    s1 = peg$parse_();
    if (s1 as any !== peg$FAILED) {
      if (input.substr(peg$currPos, 3) === peg$c71) {
        s2 = peg$c71;
        peg$currPos += 3;
      } else {
        s2 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c72); }
      }
      if (s2 as any === peg$FAILED) {
        if (input.substr(peg$currPos, 2) === peg$c66) {
          s2 = peg$c66;
          peg$currPos += 2;
        } else {
          s2 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c67); }
        }
      }
      if (s2 as any !== peg$FAILED) {
        peg$savedPos = s0;
        s1 = peg$c85(s2);
        s0 = s1;
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseNoCertify(): any {
    let s0, s1;

    s0 = peg$currPos;
    if (input.substr(peg$currPos, 9) === peg$c86) {
      s1 = peg$c86;
      peg$currPos += 9;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c87); }
    }
    if (s1 as any !== peg$FAILED) {
      peg$savedPos = s0;
      s1 = peg$c88();
    }
    s0 = s1;

    return s0;
  }

  function peg$parseStep(): any {
    let s0, s1;

    s0 = peg$currPos;
    if (input.substr(peg$currPos, 4) === peg$c89) {
      s1 = peg$c89;
      peg$currPos += 4;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c90); }
    }
    if (s1 as any !== peg$FAILED) {
      peg$savedPos = s0;
      s1 = peg$c91();
    }
    s0 = s1;

    return s0;
  }

  function peg$parseClear(): any {
    let s0, s1;

    s0 = peg$currPos;
    if (input.substr(peg$currPos, 5) === peg$c92) {
      s1 = peg$c92;
      peg$currPos += 5;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c93); }
    }
    if (s1 as any !== peg$FAILED) {
      peg$savedPos = s0;
      s1 = peg$c94();
    }
    s0 = s1;

    return s0;
  }

  function peg$parsePause(): any {
    let s0, s1;

    s0 = peg$currPos;
    if (input.substr(peg$currPos, 5) === peg$c95) {
      s1 = peg$c95;
      peg$currPos += 5;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c96); }
    }
    if (s1 as any !== peg$FAILED) {
      peg$savedPos = s0;
      s1 = peg$c97();
    }
    s0 = s1;

    return s0;
  }

  function peg$parseSave(): any {
    let s0, s1;

    s0 = peg$currPos;
    if (input.substr(peg$currPos, 4) === peg$c98) {
      s1 = peg$c98;
      peg$currPos += 4;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c99); }
    }
    if (s1 as any !== peg$FAILED) {
      peg$savedPos = s0;
      s1 = peg$c100();
    }
    s0 = s1;

    return s0;
  }

  function peg$parsePrint(): any {
    let s0, s1, s2, s3;

    s0 = peg$currPos;
    if (input.substr(peg$currPos, 5) === peg$c101) {
      s1 = peg$c101;
      peg$currPos += 5;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c102); }
    }
    if (s1 as any !== peg$FAILED) {
      s2 = peg$parse_();
      if (s2 as any !== peg$FAILED) {
        s3 = peg$parseCommentText();
        if (s3 as any !== peg$FAILED) {
          peg$savedPos = s0;
          s1 = peg$c103(s3);
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseWrite(): any {
    let s0, s1, s2, s3;

    s0 = peg$currPos;
    if (input.substr(peg$currPos, 5) === peg$c104) {
      s1 = peg$c104;
      peg$currPos += 5;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c105); }
    }
    if (s1 as any !== peg$FAILED) {
      s2 = peg$parse_();
      if (s2 as any !== peg$FAILED) {
        s3 = peg$parseCommentText();
        if (s3 as any !== peg$FAILED) {
          peg$savedPos = s0;
          s1 = peg$c106(s3);
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parsePart(): any {
    let s0, s1, s2, s3, s4, s5, s6;

    s0 = peg$currPos;
    s1 = peg$parseColor();
    if (s1 as any !== peg$FAILED) {
      s2 = peg$parse_();
      if (s2 as any !== peg$FAILED) {
        s3 = peg$parseMatrix4();
        if (s3 as any !== peg$FAILED) {
          s4 = peg$parse_();
          if (s4 as any !== peg$FAILED) {
            s5 = peg$parseFile();
            if (s5 as any !== peg$FAILED) {
              s6 = peg$parseEOL();
              if (s6 as any !== peg$FAILED) {
                peg$savedPos = s0;
                s1 = peg$c107(s1, s3, s5);
                s0 = s1;
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseLine(): any {
    let s0, s1, s2, s3, s4, s5, s6;

    s0 = peg$currPos;
    s1 = peg$parseColor();
    if (s1 as any !== peg$FAILED) {
      s2 = peg$parse_();
      if (s2 as any !== peg$FAILED) {
        s3 = peg$parseVector3();
        if (s3 as any !== peg$FAILED) {
          s4 = peg$parse_();
          if (s4 as any !== peg$FAILED) {
            s5 = peg$parseVector3();
            if (s5 as any !== peg$FAILED) {
              s6 = peg$parseEOL();
              if (s6 as any !== peg$FAILED) {
                peg$savedPos = s0;
                s1 = peg$c108(s1, s3, s5);
                s0 = s1;
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseTriangle(): any {
    let s0, s1, s2, s3, s4, s5, s6, s7, s8;

    s0 = peg$currPos;
    s1 = peg$parseColor();
    if (s1 as any !== peg$FAILED) {
      s2 = peg$parse_();
      if (s2 as any !== peg$FAILED) {
        s3 = peg$parseVector3();
        if (s3 as any !== peg$FAILED) {
          s4 = peg$parse_();
          if (s4 as any !== peg$FAILED) {
            s5 = peg$parseVector3();
            if (s5 as any !== peg$FAILED) {
              s6 = peg$parse_();
              if (s6 as any !== peg$FAILED) {
                s7 = peg$parseVector3();
                if (s7 as any !== peg$FAILED) {
                  s8 = peg$parseEOL();
                  if (s8 as any !== peg$FAILED) {
                    peg$savedPos = s0;
                    s1 = peg$c109(s1, s3, s5, s7);
                    s0 = s1;
                  } else {
                    peg$currPos = s0;
                    s0 = peg$FAILED;
                  }
                } else {
                  peg$currPos = s0;
                  s0 = peg$FAILED;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseQuad(): any {
    let s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10;

    s0 = peg$currPos;
    s1 = peg$parseColor();
    if (s1 as any !== peg$FAILED) {
      s2 = peg$parse_();
      if (s2 as any !== peg$FAILED) {
        s3 = peg$parseVector3();
        if (s3 as any !== peg$FAILED) {
          s4 = peg$parse_();
          if (s4 as any !== peg$FAILED) {
            s5 = peg$parseVector3();
            if (s5 as any !== peg$FAILED) {
              s6 = peg$parse_();
              if (s6 as any !== peg$FAILED) {
                s7 = peg$parseVector3();
                if (s7 as any !== peg$FAILED) {
                  s8 = peg$parse_();
                  if (s8 as any !== peg$FAILED) {
                    s9 = peg$parseVector3();
                    if (s9 as any !== peg$FAILED) {
                      s10 = peg$parseEOL();
                      if (s10 as any !== peg$FAILED) {
                        peg$savedPos = s0;
                        s1 = peg$c110(s1, s3, s5, s7, s9);
                        s0 = s1;
                      } else {
                        peg$currPos = s0;
                        s0 = peg$FAILED;
                      }
                    } else {
                      peg$currPos = s0;
                      s0 = peg$FAILED;
                    }
                  } else {
                    peg$currPos = s0;
                    s0 = peg$FAILED;
                  }
                } else {
                  peg$currPos = s0;
                  s0 = peg$FAILED;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseOptionalLine(): any {
    let s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10;

    s0 = peg$currPos;
    s1 = peg$parseColor();
    if (s1 as any !== peg$FAILED) {
      s2 = peg$parse_();
      if (s2 as any !== peg$FAILED) {
        s3 = peg$parseVector3();
        if (s3 as any !== peg$FAILED) {
          s4 = peg$parse_();
          if (s4 as any !== peg$FAILED) {
            s5 = peg$parseVector3();
            if (s5 as any !== peg$FAILED) {
              s6 = peg$parse_();
              if (s6 as any !== peg$FAILED) {
                s7 = peg$parseVector3();
                if (s7 as any !== peg$FAILED) {
                  s8 = peg$parse_();
                  if (s8 as any !== peg$FAILED) {
                    s9 = peg$parseVector3();
                    if (s9 as any !== peg$FAILED) {
                      s10 = peg$parseEOL();
                      if (s10 as any !== peg$FAILED) {
                        peg$savedPos = s0;
                        s1 = peg$c111(s1, s3, s5, s7, s9);
                        s0 = s1;
                      } else {
                        peg$currPos = s0;
                        s0 = peg$FAILED;
                      }
                    } else {
                      peg$currPos = s0;
                      s0 = peg$FAILED;
                    }
                  } else {
                    peg$currPos = s0;
                    s0 = peg$FAILED;
                  }
                } else {
                  peg$currPos = s0;
                  s0 = peg$FAILED;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseMatrix4(): any {
    let s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10, s11, s12, s13, s14, s15, s16, s17, s18, s19, s20, s21, s22, s23;

    s0 = peg$currPos;
    s1 = peg$parseFloat();
    if (s1 as any !== peg$FAILED) {
      s2 = peg$parse_();
      if (s2 as any !== peg$FAILED) {
        s3 = peg$parseFloat();
        if (s3 as any !== peg$FAILED) {
          s4 = peg$parse_();
          if (s4 as any !== peg$FAILED) {
            s5 = peg$parseFloat();
            if (s5 as any !== peg$FAILED) {
              s6 = peg$parse_();
              if (s6 as any !== peg$FAILED) {
                s7 = peg$parseFloat();
                if (s7 as any !== peg$FAILED) {
                  s8 = peg$parse_();
                  if (s8 as any !== peg$FAILED) {
                    s9 = peg$parseFloat();
                    if (s9 as any !== peg$FAILED) {
                      s10 = peg$parse_();
                      if (s10 as any !== peg$FAILED) {
                        s11 = peg$parseFloat();
                        if (s11 as any !== peg$FAILED) {
                          s12 = peg$parse_();
                          if (s12 as any !== peg$FAILED) {
                            s13 = peg$parseFloat();
                            if (s13 as any !== peg$FAILED) {
                              s14 = peg$parse_();
                              if (s14 as any !== peg$FAILED) {
                                s15 = peg$parseFloat();
                                if (s15 as any !== peg$FAILED) {
                                  s16 = peg$parse_();
                                  if (s16 as any !== peg$FAILED) {
                                    s17 = peg$parseFloat();
                                    if (s17 as any !== peg$FAILED) {
                                      s18 = peg$parse_();
                                      if (s18 as any !== peg$FAILED) {
                                        s19 = peg$parseFloat();
                                        if (s19 as any !== peg$FAILED) {
                                          s20 = peg$parse_();
                                          if (s20 as any !== peg$FAILED) {
                                            s21 = peg$parseFloat();
                                            if (s21 as any !== peg$FAILED) {
                                              s22 = peg$parse_();
                                              if (s22 as any !== peg$FAILED) {
                                                s23 = peg$parseFloat();
                                                if (s23 as any !== peg$FAILED) {
                                                  peg$savedPos = s0;
                                                  s1 = peg$c112(s1, s3, s5, s7, s9, s11, s13, s15, s17, s19, s21, s23);
                                                  s0 = s1;
                                                } else {
                                                  peg$currPos = s0;
                                                  s0 = peg$FAILED;
                                                }
                                              } else {
                                                peg$currPos = s0;
                                                s0 = peg$FAILED;
                                              }
                                            } else {
                                              peg$currPos = s0;
                                              s0 = peg$FAILED;
                                            }
                                          } else {
                                            peg$currPos = s0;
                                            s0 = peg$FAILED;
                                          }
                                        } else {
                                          peg$currPos = s0;
                                          s0 = peg$FAILED;
                                        }
                                      } else {
                                        peg$currPos = s0;
                                        s0 = peg$FAILED;
                                      }
                                    } else {
                                      peg$currPos = s0;
                                      s0 = peg$FAILED;
                                    }
                                  } else {
                                    peg$currPos = s0;
                                    s0 = peg$FAILED;
                                  }
                                } else {
                                  peg$currPos = s0;
                                  s0 = peg$FAILED;
                                }
                              } else {
                                peg$currPos = s0;
                                s0 = peg$FAILED;
                              }
                            } else {
                              peg$currPos = s0;
                              s0 = peg$FAILED;
                            }
                          } else {
                            peg$currPos = s0;
                            s0 = peg$FAILED;
                          }
                        } else {
                          peg$currPos = s0;
                          s0 = peg$FAILED;
                        }
                      } else {
                        peg$currPos = s0;
                        s0 = peg$FAILED;
                      }
                    } else {
                      peg$currPos = s0;
                      s0 = peg$FAILED;
                    }
                  } else {
                    peg$currPos = s0;
                    s0 = peg$FAILED;
                  }
                } else {
                  peg$currPos = s0;
                  s0 = peg$FAILED;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseVector3(): any {
    let s0, s1, s2, s3, s4, s5;

    s0 = peg$currPos;
    s1 = peg$parseFloat();
    if (s1 as any !== peg$FAILED) {
      s2 = peg$parse_();
      if (s2 as any !== peg$FAILED) {
        s3 = peg$parseFloat();
        if (s3 as any !== peg$FAILED) {
          s4 = peg$parse_();
          if (s4 as any !== peg$FAILED) {
            s5 = peg$parseFloat();
            if (s5 as any !== peg$FAILED) {
              peg$savedPos = s0;
              s1 = peg$c113(s1, s3, s5);
              s0 = s1;
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseColor(): any {
    let s0, s1;

    s0 = peg$parseHexColor();
    if (s0 as any === peg$FAILED) {
      s0 = peg$currPos;
      s1 = peg$parseIntColor();
      if (s1 as any !== peg$FAILED) {
        peg$savedPos = s0;
        s1 = peg$c114(s1);
      }
      s0 = s1;
    }

    return s0;
  }

  function peg$parseIntColor(): any {
    let s0, s1, s2;

    s0 = peg$currPos;
    s1 = [];
    if (peg$c115.test(input.charAt(peg$currPos))) {
      s2 = input.charAt(peg$currPos);
      peg$currPos++;
    } else {
      s2 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c116); }
    }
    if (s2 as any !== peg$FAILED) {
      while (s2 as any !== peg$FAILED) {
        s1.push(s2);
        if (peg$c115.test(input.charAt(peg$currPos))) {
          s2 = input.charAt(peg$currPos);
          peg$currPos++;
        } else {
          s2 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c116); }
        }
      }
    } else {
      s1 = peg$FAILED;
    }
    if (s1 as any !== peg$FAILED) {
      peg$savedPos = s0;
      s1 = peg$c117();
    }
    s0 = s1;

    return s0;
  }

  function peg$parseHexColor(): any {
    let s0, s1, s2, s3, s4, s5, s6, s7, s8, s9;

    s0 = peg$currPos;
    if (input.substr(peg$currPos, 3) === peg$c118) {
      s1 = peg$c118;
      peg$currPos += 3;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c119); }
    }
    if (s1 as any !== peg$FAILED) {
      s2 = peg$currPos;
      s3 = peg$currPos;
      s4 = peg$parseHexDigit();
      if (s4 as any !== peg$FAILED) {
        s5 = peg$parseHexDigit();
        if (s5 as any !== peg$FAILED) {
          s6 = peg$parseHexDigit();
          if (s6 as any !== peg$FAILED) {
            s7 = peg$parseHexDigit();
            if (s7 as any !== peg$FAILED) {
              s8 = peg$parseHexDigit();
              if (s8 as any !== peg$FAILED) {
                s9 = peg$parseHexDigit();
                if (s9 as any !== peg$FAILED) {
                  s4 = [s4, s5, s6, s7, s8, s9];
                  s3 = s4;
                } else {
                  peg$currPos = s3;
                  s3 = peg$FAILED;
                }
              } else {
                peg$currPos = s3;
                s3 = peg$FAILED;
              }
            } else {
              peg$currPos = s3;
              s3 = peg$FAILED;
            }
          } else {
            peg$currPos = s3;
            s3 = peg$FAILED;
          }
        } else {
          peg$currPos = s3;
          s3 = peg$FAILED;
        }
      } else {
        peg$currPos = s3;
        s3 = peg$FAILED;
      }
      if (s3 as any !== peg$FAILED) {
        s2 = input.substring(s2, peg$currPos);
      } else {
        s2 = s3;
      }
      if (s2 as any !== peg$FAILED) {
        peg$savedPos = s0;
        s1 = peg$c120();
        s0 = s1;
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseHexDigit(): any {
    let s0;

    if (peg$c121.test(input.charAt(peg$currPos))) {
      s0 = input.charAt(peg$currPos);
      peg$currPos++;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c122); }
    }

    return s0;
  }

  function peg$parseFloat(): any {
    let s0, s1, s2, s3, s4;

    s0 = peg$currPos;
    s1 = peg$parseMinus();
    if (s1 as any === peg$FAILED) {
      s1 = null;
    }
    if (s1 as any !== peg$FAILED) {
      s2 = peg$parseInt();
      if (s2 as any === peg$FAILED) {
        s2 = null;
      }
      if (s2 as any !== peg$FAILED) {
        s3 = peg$parseFrac();
        if (s3 as any === peg$FAILED) {
          s3 = null;
        }
        if (s3 as any !== peg$FAILED) {
          s4 = peg$parseExp();
          if (s4 as any === peg$FAILED) {
            s4 = null;
          }
          if (s4 as any !== peg$FAILED) {
            s1 = [s1, s2, s3, s4];
            s0 = s1;
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }
    if (s0 as any === peg$FAILED) {
      s0 = peg$currPos;
      s1 = peg$parseInt();
      if (s1 as any !== peg$FAILED) {
        peg$savedPos = s0;
        s1 = peg$c123();
      }
      s0 = s1;
    }

    return s0;
  }

  function peg$parseDecimalPoint(): any {
    let s0;

    if (input.charCodeAt(peg$currPos) === 46) {
      s0 = peg$c124;
      peg$currPos++;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c125); }
    }

    return s0;
  }

  function peg$parseDigit1_9(): any {
    let s0;

    if (peg$c126.test(input.charAt(peg$currPos))) {
      s0 = input.charAt(peg$currPos);
      peg$currPos++;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c127); }
    }

    return s0;
  }

  function peg$parsee(): any {
    let s0;

    if (peg$c128.test(input.charAt(peg$currPos))) {
      s0 = input.charAt(peg$currPos);
      peg$currPos++;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c129); }
    }

    return s0;
  }

  function peg$parseExp(): any {
    let s0, s1, s2, s3, s4;

    s0 = peg$currPos;
    s1 = peg$parsee();
    if (s1 as any !== peg$FAILED) {
      s2 = peg$parseMinus();
      if (s2 as any === peg$FAILED) {
        s2 = peg$parsePlus();
      }
      if (s2 as any === peg$FAILED) {
        s2 = null;
      }
      if (s2 as any !== peg$FAILED) {
        s3 = [];
        s4 = peg$parseDigit();
        if (s4 as any !== peg$FAILED) {
          while (s4 as any !== peg$FAILED) {
            s3.push(s4);
            s4 = peg$parseDigit();
          }
        } else {
          s3 = peg$FAILED;
        }
        if (s3 as any !== peg$FAILED) {
          s1 = [s1, s2, s3];
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseFrac(): any {
    let s0, s1, s2, s3;

    s0 = peg$currPos;
    s1 = peg$parseDecimalPoint();
    if (s1 as any !== peg$FAILED) {
      s2 = [];
      s3 = peg$parseDigit();
      while (s3 as any !== peg$FAILED) {
        s2.push(s3);
        s3 = peg$parseDigit();
      }
      if (s2 as any !== peg$FAILED) {
        s1 = [s1, s2];
        s0 = s1;
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseInt(): any {
    let s0, s1, s2, s3;

    s0 = peg$parseZero();
    if (s0 as any === peg$FAILED) {
      s0 = peg$currPos;
      s1 = peg$parseDigit1_9();
      if (s1 as any !== peg$FAILED) {
        s2 = [];
        s3 = peg$parseDigit();
        while (s3 as any !== peg$FAILED) {
          s2.push(s3);
          s3 = peg$parseDigit();
        }
        if (s2 as any !== peg$FAILED) {
          s1 = [s1, s2];
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    }

    return s0;
  }

  function peg$parseMinus(): any {
    let s0;

    if (input.charCodeAt(peg$currPos) === 45) {
      s0 = peg$c130;
      peg$currPos++;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c131); }
    }

    return s0;
  }

  function peg$parsePlus(): any {
    let s0;

    if (input.charCodeAt(peg$currPos) === 43) {
      s0 = peg$c132;
      peg$currPos++;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c133); }
    }

    return s0;
  }

  function peg$parseZero(): any {
    let s0;

    if (input.charCodeAt(peg$currPos) === 48) {
      s0 = peg$c1;
      peg$currPos++;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c2); }
    }

    return s0;
  }

  function peg$parseDigit(): any {
    let s0;

    if (peg$c115.test(input.charAt(peg$currPos))) {
      s0 = input.charAt(peg$currPos);
      peg$currPos++;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c116); }
    }

    return s0;
  }

  function peg$parseFile(): any {
    let s0, s1, s2;

    s0 = peg$currPos;
    s1 = [];
    if (peg$c134.test(input.charAt(peg$currPos))) {
      s2 = input.charAt(peg$currPos);
      peg$currPos++;
    } else {
      s2 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c135); }
    }
    while (s2 as any !== peg$FAILED) {
      s1.push(s2);
      if (peg$c134.test(input.charAt(peg$currPos))) {
        s2 = input.charAt(peg$currPos);
        peg$currPos++;
      } else {
        s2 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c135); }
      }
    }
    if (s1 as any !== peg$FAILED) {
      peg$savedPos = s0;
      s1 = peg$c136();
    }
    s0 = s1;

    return s0;
  }

  function peg$parseEOL(): any {
    let s0, s1, s2, s3, s4;

    s0 = peg$currPos;
    s1 = [];
    if (peg$c19.test(input.charAt(peg$currPos))) {
      s2 = input.charAt(peg$currPos);
      peg$currPos++;
    } else {
      s2 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c20); }
    }
    while (s2 as any !== peg$FAILED) {
      s1.push(s2);
      if (peg$c19.test(input.charAt(peg$currPos))) {
        s2 = input.charAt(peg$currPos);
        peg$currPos++;
      } else {
        s2 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c20); }
      }
    }
    if (s1 as any !== peg$FAILED) {
      s2 = [];
      if (peg$c137.test(input.charAt(peg$currPos))) {
        s3 = input.charAt(peg$currPos);
        peg$currPos++;
      } else {
        s3 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c138); }
      }
      while (s3 as any !== peg$FAILED) {
        s2.push(s3);
        if (peg$c137.test(input.charAt(peg$currPos))) {
          s3 = input.charAt(peg$currPos);
          peg$currPos++;
        } else {
          s3 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c138); }
        }
      }
      if (s2 as any !== peg$FAILED) {
        s3 = [];
        if (peg$c139.test(input.charAt(peg$currPos))) {
          s4 = input.charAt(peg$currPos);
          peg$currPos++;
        } else {
          s4 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c140); }
        }
        while (s4 as any !== peg$FAILED) {
          s3.push(s4);
          if (peg$c139.test(input.charAt(peg$currPos))) {
            s4 = input.charAt(peg$currPos);
            peg$currPos++;
          } else {
            s4 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$c140); }
          }
        }
        if (s3 as any !== peg$FAILED) {
          s1 = [s1, s2, s3];
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parse_(): any {
    let s0, s1;

    peg$silentFails++;
    s0 = [];
    if (peg$c19.test(input.charAt(peg$currPos))) {
      s1 = input.charAt(peg$currPos);
      peg$currPos++;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c20); }
    }
    if (s1 as any !== peg$FAILED) {
      while (s1 as any !== peg$FAILED) {
        s0.push(s1);
        if (peg$c19.test(input.charAt(peg$currPos))) {
          s1 = input.charAt(peg$currPos);
          peg$currPos++;
        } else {
          s1 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c20); }
        }
      }
    } else {
      s0 = peg$FAILED;
    }
    peg$silentFails--;
    if (s0 as any === peg$FAILED) {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c141); }
    }

    return s0;
  }

  peg$result = peg$startRuleFunction();

  if (peg$result !== peg$FAILED && peg$currPos === input.length) {
    return peg$result;
  } else {
    if (peg$result !== peg$FAILED && peg$currPos < input.length) {
      peg$fail(peg$endExpectation());
    }

    throw peg$buildStructuredError(
      peg$maxFailExpected,
      peg$maxFailPos < input.length ? input.charAt(peg$maxFailPos) : null,
      peg$maxFailPos < input.length
        ? peg$computeLocation(peg$maxFailPos, peg$maxFailPos + 1)
        : peg$computeLocation(peg$maxFailPos, peg$maxFailPos)
    );
  }
}

export interface IParseOptions {
  filename?: string;
  startRule?: string;
  tracer?: any;
  [key: string]: any;
}
export type ParseFunction = (input: string, options?: IParseOptions) => any;
export const parse: ParseFunction = peg$parse;

